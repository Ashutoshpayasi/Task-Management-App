openapi: 3.0.0
info:
  title: User and Task Management API
  version: 1.0.0
  description: API documentation for user and task management. Includes registration, login, OTP verification, and CRUD operations

paths:
  /tasks:
    post:
      summary: Create a new task
      description: Requires `tasks:create` permission.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TaskInput"
      responses:
        "201":
          description: Task created successfully
        "400":
          description: Invalid request data
      tags:
        - Tasks
    get:
      summary: Get a list of all tasks
      description: Requires `tasks:read` permission.
      security:
        - bearerAuth: []
      responses:
        "200":
          description: A list of tasks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Task"
      tags:
        - Tasks

  /tasks/{id}:
    patch:
      summary: Update a task by ID
      description: Requires `tasks:update` permission.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TaskUpdate"
      responses:
        "200":
          description: Task updated successfully
        "404":
          description: Task not found
      tags:
        - Tasks

    delete:
      summary: Delete a task by ID
      description: Requires `tasks:delete` permission.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Task deleted successfully
        "404":
          description: Task not found
      tags:
        - Tasks

  /user/register:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserInput"
      responses:
        "201":
          description: User registered successfully
        "400":
          description: Bad request - Invalid input data
        "409":
          description: Conflict - Email already exists

  /user/verifyotp:
    post:
      summary: Verify OTP for email verification
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: user@example.com
                otp:
                  type: string
                  example: "123456"
      responses:
        "200":
          description: OTP verified successfully
        "400":
          description: Invalid OTP or OTP expired

  /user/resendotp:
    post:
      summary: Resend OTP for email verification
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: user@example.com
      responses:
        "200":
          description: OTP resent successfully
        "400":
          description: Bad request - Invalid email

  /user/login:
    post:
      summary: Log in a user
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginInput"
      responses:
        "200":
          description: User logged in successfully
        "401":
          description: Unauthorized - Invalid email or password

  /user/getalluser:
    get:
      summary: Get all users
      security:
        - bearerAuth: []
      responses:
        "200":
          description: A list of all users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"

  /user/{id}:
    get:
      summary: Get a user by ID
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: User details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "404":
          description: User not found

    put:
      summary: Update a user by ID
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserUpdate"
      responses:
        "200":
          description: User updated successfully
        "404":
          description: User not found

    delete:
      summary: Delete a user by ID
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "204":
          description: User deleted successfully
        "404":
          description: User not found

  /user/resetpassword:
    post:
      summary: Request password reset
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: user@example.com
      responses:
        "200":
          description: Password reset email sent
        "400":
          description: Invalid email address

  /user/reset-password/{token}:
    post:
      summary: Reset user password using token
      parameters:
        - in: path
          name: token
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                  example: NewPassword123
      responses:
        "200":
          description: Password reset successfully
        "400":
          description: Invalid or expired token

  /verify-email/{token}:
    get:
      summary: Verify email using token
      parameters:
        - in: path
          name: token
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Email verified successfully
        "400":
          description: Invalid or expired token

components:
  schemas:
    TaskInput:
      type: object
      properties:
        title:
          type: string
          example: "Complete project documentation"
        description:
          type: string
          example: "Document all APIs by the end of the month"
        status:
          type: string
          example: "Todo"
          enum: ["Todo", "In Progress", "Done"]
        assignedTo:
          type: string
          example: "60d0fe4f5311236168a109cb"
        createdBy:
          type: string
          example: "60d0fe4f5311236168a109ca"

    Task:
      type: object
      properties:
        id:
          type: string
          example: "60d0fe4f5311236168a109cc"
        title:
          type: string
          example: "Complete project documentation"
        description:
          type: string
          example: "Document all APIs by the end of the month"
        status:
          type: string
          example: "In Progress"
          enum: ["Todo", "In Progress", "Done"]
        assignedTo:
          type: string
          example: "60d0fe4f5311236168a109cb"
        createdBy:
          type: string
          example: "60d0fe4f5311236168a109ca"
        createdAt:
          type: string
          format: date-time
          example: "2023-11-06T10:00:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2023-11-06T10:00:00Z"

    TaskUpdate:
      type: object
      properties:
        title:
          type: string
          example: "Update project requirements"
        description:
          type: string
          example: "Add requirements for new API endpoints"
        status:
          type: string
          example: "Done"
          enum: ["Todo", "In Progress", "Done"]

    UserInput:
      type: object
      properties:
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Doe
        email:
          type: string
          example: johndoe@example.com
        password:
          type: string
          example: Password123
        role:
          type: string
          example: user
          enum: [user, admin, manager]

    LoginInput:
      type: object
      properties:
        email:
          type: string
          example: johndoe@example.com
        password:
          type: string
          example: Password123

    User:
      type: object
      properties:
        id:
          type: string
          example: 60d0fe4f5311236168a109ca
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Doe
        email:
          type: string
          example: johndoe@example.com
        role:
          type: string
          example: user
          enum: [user, admin, manager]
        isVerified:
          type: boolean
          example: true

    UserUpdate:
      type: object
      properties:
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Doe
        email:
          type: string
          example: johndoe@example.com
        role:
          type: string
          example: manager
          enum: [user, admin, manager]

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
